{
  "version": 3,
  "sources": ["../src/metro.mjs", "../src/mw/json.mjs", "../src/mw/thrower.mjs", "../src/everything.mjs"],
  "sourcesContent": ["/**\n * base URL used to link to more information about an error message\n */\nconst metroURL = 'https://metro.muze.nl/details/'\n\n/**\n * Symbols:\n * - isProxy: used to test if an object is a metro Proxy to another object\n * - source: used to return the actual source (target) of a metro Proxy\n */\nif (!Symbol.metroProxy) {\n\tSymbol.metroProxy = Symbol('isProxy')\n}\nif (!Symbol.metroSource) {\n\tSymbol.metroSource = Symbol('source')\n}\n\n/**\n * Metro HTTP Client with middleware support\n * @method get\n * @method post\n * @method put\n * @method delete\n * @method patch\n * @method head\n * @method options\n * @method query\n * @method fetch\n */\nexport class Client\n{\n\t#options = {\n\t\turl: typeof window != 'undefined' ? window.location : 'https://localhost'\n\t}\n\t#verbs = ['get','post','put','delete','patch','head','options','query']\n\n\tstatic tracers = {}\n\n\t/**\n\t * @typedef {Object} ClientOptions\n\t * @property {Array} middlewares - list of middleware functions\n\t * @property {string|URL} url - default url of the client\n\t * @property {[string]} verbs - a list of verb methods to expose, e.g. ['get','post']\n\t * \n\t * Constructs a new metro client. Can have any number of params.\n\t * @params {ClientOptions|URL|Function|Client}\n\t * @returns {Client} - A metro client object with given or default verb methods\n\t */\n\tconstructor(...options)\n\t{\n\t\tfor (let option of options) {\n\t\t\tif (typeof option == 'string' || option instanceof String) {\n\t\t\t\tthis.#options.url = ''+option\n\t\t\t} else if (option instanceof Client) {\n\t\t\t\tObject.assign(this.#options, option.#options)\n\t\t\t} else if (option instanceof Function) {\n\t\t\t\tthis.#addMiddlewares([option])\n\t\t\t} else if (option && typeof option == 'object') {\n\t\t\t\tfor (let param in option) {\n\t\t\t\t\tif (param == 'middlewares') {\n\t\t\t\t\t\tthis.#addMiddlewares(option[param])\n\t\t\t\t\t} else if (typeof option[param] == 'function') {\n\t\t\t\t\t\tthis.#options[param] = option[param](this.#options[param], this.#options)\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.#options[param] = option[param]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (this.#options.verbs) {\n\t\t\tthis.#verbs = this.#options.verbs\n\t\t\tdelete this.#options.verbs\n\t\t}\n\n\t\tfor (const verb of this.#verbs) {\n\t\t\tthis[verb] = async function(...options) {\n\t\t\t\treturn this.fetch(request(\n\t\t\t\t\tthis.#options,\n\t\t\t\t\t...options,\n\t\t\t\t\t{method: verb.toUpperCase()}\n\t\t\t\t))\n\t\t\t}\n\t\t}\n\t\tObject.freeze(this)\n\t}\n\n\t#addMiddlewares(middlewares)\n\t{\n\t\tif (typeof middlewares == 'function') {\n\t\t\tmiddlewares = [ middlewares ]\n\t\t}\n\t\tlet index = middlewares.findIndex(m => typeof m != 'function')\n\t\tif (index>=0) {\n\t\t\tthrow metroError('metro.client: middlewares must be a function or an array of functions '\n\t\t\t\t+metroURL+'client/invalid-middlewares/', middlewares[index])\n\t\t}\n\t\tif (!Array.isArray(this.#options.middlewares)) {\n\t\t\tthis.#options.middlewares = []\n\t\t}\n\t\tthis.#options.middlewares = this.#options.middlewares.concat(middlewares)\n\t}\n\n\t/**\n\t * Mimics the standard browser fetch method, but uses any middleware installed through\n\t * the constructor.\n\t * @param {Request|string|Object} - Required. The URL or Request object, accepts all types that are accepted by metro.request\n\t * @param {Object} - Optional. Any object that is accepted by metro.request\n\t * @return {Promise<Response|*>} - The metro.response to this request, or any other result as changed by any included middleware.\n\t */\n\tfetch(req, options)\n\t{\n\t\treq = request(req, options)\n\t\tif (!req.url) {\n\t\t\tthrow metroError('metro.client.'+req.method.toLowerCase()+': Missing url parameter '+metroURL+'client/fetch-missing-url/', req)\n\t\t}\n\t\tif (!options) {\n\t\t\toptions = {}\n\t\t}\n\t\tif (!(typeof options === 'object') \n\t\t\t|| options instanceof String) \n\t\t{\n\t\t\tthrow metroError('metro.client.fetch: Invalid options parameter '+metroURL+'client/fetch-invalid-options/', options)\n\t\t}\n\n\t\tconst metrofetch = async function browserFetch(req)\n\t\t{\n\t\t\tif (req[Symbol.metroProxy]) {\n\t\t\t\treq = req[Symbol.metroSource]\n\t\t\t}\n\t\t\tconst res = await fetch(req)\n\t\t\treturn response(res)\n\t\t}\n\t\t\n\t\tlet middlewares = [metrofetch].concat(this.#options?.middlewares?.slice() || [])\n\t\toptions = Object.assign({}, this.#options, options)\n\t\t//@TODO: do this once in constructor?\n\t\tlet next\n\t\tfor (let middleware of middlewares) {\n\t\t\tnext = (function(next, middleware) {\n\t\t\t\treturn async function(req) {\n\t\t\t\t\tlet res\n\t\t\t\t\tlet tracers = Object.values(Client.tracers)\n\t\t\t\t\tfor(let tracer of tracers) {\n\t\t\t\t\t\tif (tracer.request) {\n\t\t\t\t\t\t\ttracer.request.call(tracer, req, middleware)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tres = await middleware(req, next)\n\t\t\t\t\tfor(let tracer of tracers) {\n\t\t\t\t\t\tif (tracer.response) {\n\t\t\t\t\t\t\ttracer.response.call(tracer, res, middleware)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn res\n\t\t\t\t}\t\t\t\t\t\t\t\t\n\t\t\t})(next, middleware)\n\t\t}\n\t\treturn next(req)\n\t}\n\n\twith(...options) {\n\t\treturn new Client(this, ...options)\n\t}\n}\n\n/**\n * Returns a new metro Client object.\n * @param {...ClientOptions|string|URL}\n * @return Client\n */\nexport function client(...options)\n{\n\treturn new Client(...options)\n}\n\nfunction appendHeaders(r, headers)\n{\n\tif (!Array.isArray(headers)) {\n\t\theaders = [headers]\n\t}\n\theaders.forEach((header) => {\n\t\tif (typeof header == 'function') {\n\t\t\tlet result = header(r.headers, r)\n\t\t\tif (result) {\n\t\t\t\tif (!Array.isArray(result)) {\n\t\t\t\t\tresult = [result]\n\t\t\t\t}\n\t\t\t\theaders = headers.concat(result)\n\t\t\t}\n\t\t}\n\t})\n\theaders.forEach((header) => {\n\t\tObject.entries(header).forEach(([name,value]) => {\t\t\t\n\t\t\tr.headers.append(name, value)\n\t\t})\n\t})\n}\n\nfunction getRequestParams(req, current)\n{\n\tlet params = current || {}\n\tif (!params.url && current.url) {\n\t\tparams.url = current.url\n\t}\n\t// function to fetch all relevant properties of a Request\n\tfor(let prop of ['method','headers','body','mode','credentials','cache','redirect',\n\t\t'referrer','referrerPolicy','integrity','keepalive','signal',\n\t\t'priority','url']) {\n\t\tlet value = req[prop]\n\t\tif (typeof value=='undefined' || value == null) {\n\t\t\tcontinue\n\t\t}\n\t\tif (value?.[Symbol.metroProxy]) {\n\t\t\tvalue = value[Symbol.metroSource]\n\t\t}\n\t\tif (typeof value == 'function') {\n\t\t\tparams[prop] = value(params[prop], params)\n\t\t} else {\n\t\t\tif (prop == 'url') {\n\t\t\t\tparams.url = url(params.url, value)\n\t\t\t} else if (prop == 'headers') {\n\t\t\t\tparams.headers = new Headers(current.headers)\n\t\t\t\tif (!(value instanceof Headers)) {\n\t\t\t\t\tvalue = new Headers(req.headers)\n\t\t\t\t}\n\t\t\t\tfor (let [key, val] of value.entries()) {\n\t\t\t\t\tparams.headers.set(key, val)\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tparams[prop] = value\n\t\t\t}\n\t\t}\n\t}\n\tif (req instanceof Request && req.data) {\n\t\t// Request.body is always transformed into ReadableStreem\n\t\t// metro.request.data is the original body passed to Request()\n\t\tparams.body = req.data\n\t}\n\treturn params\n}\n\n/**\n * @typedef {Request} MetroRequest\n * @property {Symbol(source)} - returns the target Request of this Proxy\n * @property {Symbol(isProxy)} - returns true\n * @method with - returns a new MetroRequest, with the given options added\n * @param {<RequestOptions|Request|string|URL|URLSearchParams|FormData|ReadableStream|\n *   Blob|ArrayBuffer|DataView|TypedArray>} ...options - request options, handled in order\n * \n * Returns a new metro Request object\n * @param {<RequestOptions|Request|string|URL|URLSearchParams|FormData|ReadableStream|\n *   Blob|ArrayBuffer|DataView|TypedArray>} ...options - request options, handled in order\n * @return {MetroRequest} - a new metro Request object\n */\nexport function request(...options)\n{\n\t// the standard Request constructor is a minefield\n\t// so first gather all the options together into a single\n\t// javascript object, then set it in one go\n\tlet requestParams = {\n\t\turl: typeof window != 'undefined' ? window.location : 'https://localhost/',\n\t\tduplex: 'half' // required when setting body to ReadableStream, just set it here by default already\n\t}\n\tfor (let option of options) {\n\t\tif (typeof option == 'string'\n\t\t\t|| option instanceof URL\n\t\t\t|| option instanceof URLSearchParams\n\t\t) {\n\t\t\trequestParams.url = url(requestParams.url, option)\n\t\t} else if (option && (\n\t\t\toption instanceof FormData\n\t\t\t|| option instanceof ReadableStream\n\t\t\t|| option instanceof Blob\n\t\t\t|| option instanceof ArrayBuffer\n\t\t\t|| option instanceof DataView\n\t\t)) {\n\t\t\trequestParams.body = option\n\t\t} else if (option && typeof option == 'object') {\n\t\t\tObject.assign(requestParams, getRequestParams(option, requestParams))\n\t\t}\n\t}\n\tlet r = new Request(requestParams.url, requestParams)\n\tlet data = requestParams.body\n\tif (data) {\n\t\tif (typeof data == 'object'\n\t\t\t&& !(data instanceof String)\n\t\t\t&& !(data instanceof ReadableStream)\n\t\t\t&& !(data instanceof Blob)\n\t\t\t&& !(data instanceof ArrayBuffer)\n\t\t\t&& !(data instanceof DataView)\n\t\t\t&& !(data instanceof FormData)\n\t\t\t&& !(data instanceof URLSearchParams)\n\t\t\t&& (typeof TypedArray=='undefined' || !(data instanceof TypedArray))\n\t\t) {\n\t\t\t// if we are here, body is set with an object of a type\n\t\t\t// not natively understood by Request, coerce it to a string\n\t\t\t// using toString({headers}) instead of just toString()\n\t\t\tif (typeof data.toString == 'function') {\n\t\t\t\trequestParams.body = data.toString({headers:r.headers})\n\t\t\t\tr = new Request(requestParams.url, requestParams)\n\t\t\t}\n\t\t}\n\t}\n\tObject.freeze(r)\n\treturn new Proxy(r, {\n\t\tget(target, prop, receiver) {\n\t\t\tswitch(prop) {\n\t\t\t\tcase Symbol.metroSource:\n\t\t\t\t\treturn target\n\t\t\t\tbreak\n\t\t\t\tcase Symbol.metroProxy:\n\t\t\t\t\treturn true\n\t\t\t\tbreak\n\t\t\t\tcase 'with':\n\t\t\t\t\treturn function(...options) {\n\t\t\t\t\t\tif (data) { // data is kept in a seperate value, if it set earlier\n\t\t\t\t\t\t\toptions.unshift({ body: data }) // unshifted so it can be overridden by options\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn request(target, ...options)\n\t\t\t\t\t}\n\t\t\t\tbreak\n\t\t\t\tcase 'data':\n\t\t\t\t\treturn data\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tif (target[prop] instanceof Function) {\n\t\t\t\tif (prop === 'clone') {\n\t\t\t\t\t// TODO: set req.data as the body of the clone\n\t\t\t\t}\n\t\t\t\treturn target[prop].bind(target)\n\t\t\t}\n\t\t\treturn target[prop]\n\t\t}\n\t})\n}\n\nfunction getResponseParams(res, current)\n{\n\t// function to fetch all relevant properties of a Response\n\tlet params = current || {}\n\tif (!params.url && current.url) {\n\t\tparams.url = current.url\n\t}\n\tfor(let prop of ['status','statusText','headers','body','url','type','redirected']) {\n\t\tlet value = res[prop]\n\t\tif (typeof value == 'undefined' || value == null) {\n\t\t\tcontinue\n\t\t}\n\t\tif (value?.[Symbol.metroProxy]) {\n\t\t\tvalue = value[Symbol.metroSource]\n\t\t}\n\t\tif (typeof value == 'function') {\n\t\t\tparams[prop] = value(params[prop], params)\n\t\t} else {\n\t\t\tif (prop == 'url') {\n\t\t\t\tparams.url = new URL(value, params.url || 'https://localhost/')\n\t\t\t} else {\n\t\t\t\tparams[prop] = value\n\t\t\t}\n\t\t}\n\t}\n\tif (res instanceof Response && res.data) {\n\t\t// Response.body is always transformed into ReadableStreem FIXME: check this\n\t\t// metro.response.data is the original body passed to Response()\n\t\tparams.body = res.data\n\t}\n\treturn params\n}\n\n/**\n * @typedef {Response} MetroResponse\n * @property {Symbol(source)} - returns the target Response of this Proxy\n * @property {Symbol(isProxy)} - returns true\n * @method with - returns a new MetroResponse, with the given options added\n * @param {<ResponseOptions|Response|string|URLSearchParams|FormData|ReadableStream|\n *   Blob|ArrayBuffer|DataView|TypedArray>} ...options - respomse options, handled in order\n * \n * Returns a new metro Response object\n * @param {<ResponseOptions|Response|string|URLSearchParams|FormData|ReadableStream|\n *   Blob|ArrayBuffer|DataView|TypedArray>} ...options - request options, handled in order\n * @return {MetroResponse} - a new metro Response object\n */\nexport function response(...options)\n{\n\tlet responseParams = {}\n\tfor (let option of options) {\n\t\tif (typeof option == 'string') {\n\t\t\tresponseParams.body = option\n\t\t} else if (option instanceof Response) {\n\t\t\tObject.assign(responseParams, getResponseParams(option, responseParams))\n\t\t} else if (option && typeof option == 'object') {\n\t\t\tif (option instanceof FormData\n\t\t\t\t|| option instanceof Blob\n\t\t\t\t|| option instanceof ArrayBuffer\n\t\t\t\t|| option instanceof DataView\n\t\t\t\t|| option instanceof ReadableStream\n\t\t\t\t|| option instanceof URLSearchParams\n\t\t\t\t|| option instanceof String\n\t\t\t\t|| (typeof TypedArray != 'undefined' && option instanceof TypedArray)\n\t\t\t) {\n\t\t\t\tresponseParams.body = option\n\t\t\t} else {\n\t\t\t\tObject.assign(responseParams, getResponseParams(option, responseParams))\n\t\t\t}\n\t\t}\n\t}\n\tlet data = undefined\n\tif (responseParams.body) {\n\t\tdata = responseParams.body\n\t}\n\t// if response status is 'null body status', don't set a body\n\t// that is response.status in [101, 204, 205, 304 ] \n\t// see: https://fetch.spec.whatwg.org/#statuses\n\tif ([101, 204, 205, 304 ].includes(responseParams.status)) {\n\t\tresponseParams.body = null\n\t}\n\tlet r = new Response(responseParams.body, responseParams)\t\n\tObject.freeze(r)\n\treturn new Proxy(r, {\n\t\tget(target, prop, receiver) {\n\t\t\tswitch(prop) {\n\t\t\t\tcase Symbol.metroProxy:\n\t\t\t\t\treturn true\n\t\t\t\tbreak\n\t\t\t\tcase Symbol.metroSource:\n\t\t\t\t\treturn target\n\t\t\t\tbreak\n\t\t\t\tcase 'with':\n\t\t\t\t\treturn function(...options) {\n\t\t\t\t\t\treturn response(target, ...options)\n\t\t\t\t\t}\n\t\t\t\tbreak\n\t\t\t\tcase 'data':\n\t\t\t\t\t// body is turned into ReadableStream\n\t\t\t\t\t// data is the original body param\n\t\t\t\t\treturn data\n\t\t\t\tbreak\n\t\t\t\tcase 'ok':\n\t\t\t\t\treturn (target.status>=200) && (target.status<400)\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tif (typeof target[prop] == 'function') {\n\t\t\t\treturn target[prop].bind(target)\n\t\t\t}\n\t\t\treturn target[prop]\n\t\t}\n\t})\n}\n\nfunction appendSearchParams(url, params) {\n\tif (typeof params == 'function') {\n\t\t params(url.searchParams, url)\n\t} else {\n\t\tparams = new URLSearchParams(params)\n\t\tparams.forEach((value,key) => {\n\t\t\turl.searchParams.append(key, value)\n\t\t})\n\t}\n}\n\n/**\n * @typedef {URL} MetroURL\n * @property {Symbol(source)} - returns the target Request of this Proxy\n * @property {Symbol(isProxy)} - returns true\n * @method with - returns a new MetroRequest, with the given options added\n * @param {<URL|URLSearchParams|string|Object|Function>} ...options - url options, handled in order\n * \n * Returns a new metro URL object\n * @param {<URL|URLSearchParams|string|Object|Function>} ...options - url options, handled in order\n * @return {MetroURL} - a new metro URL object\n */\nexport function url(...options)\n{\n\tlet validParams = ['hash','host','hostname','href',\n\t\t\t'password','pathname','port','protocol','username','search','searchParams']\n\tlet u = new URL('https://localhost/')\n\tfor (let option of options) {\n\t\tif (typeof option == 'string' || option instanceof String) {\n\t\t\t// option is a relative or absolute url\n\t\t\tu = new URL(option, u)\n\t\t} else if (option instanceof URL \n\t\t\t|| (typeof Location != 'undefined' \n\t\t\t\t&& option instanceof Location)\n\t\t) {\n\t\t\tu = new URL(option)\n\t\t} else if (option instanceof URLSearchParams) {\n\t\t\tappendSearchParams(u, option)\n\t\t} else if (option && typeof option == 'object') {\n\t\t\tfor (let param in option) {\n\t\t\t\tswitch(param) {\n\t\t\t\t\tcase 'search':\n\t\t\t\t\t\tif (typeof option.search == 'function') {\n\t\t\t\t\t\t\toption.search(u.search, u)\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tu.search = new URLSearchParams(option.search)\n\t\t\t\t\t\t}\n\t\t\t\t\tbreak\n\t\t\t\t\tcase 'searchParams':\n\t\t\t\t\t\tappendSearchParams(u, option.searchParams)\n\t\t\t\t\tbreak\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tif (!validParams.includes(param)) {\n\t\t\t\t\t\t\tthrow metroError('metro.url: unknown url parameter '+metroURL+'url/unknown-param-name/', param)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (typeof option[param] == 'function') {\n\t\t\t\t\t\t\toption[param](u[param], u)\n\t\t\t\t\t\t} else if (\n\t\t\t\t\t\t\ttypeof option[param] == 'string' || option[param] instanceof String \n\t\t\t\t\t\t\t|| typeof option[param] == 'number' || option[param] instanceof Number\n\t\t\t\t\t\t\t|| typeof option[param] == 'boolean' || option[param] instanceof Boolean\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tu[param] = ''+option[param]\n\t\t\t\t\t\t} else if (typeof option[param] == 'object' && option[param].toString) {\n\t\t\t\t\t\t\tu[param] = option[param].toString()\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthrow metroError('metro.url: unsupported value for '+param+' '+metroURL+'url/unsupported-param-value/', options[param])\n\t\t\t\t\t\t}\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tthrow metroError('metro.url: unsupported option value '+metroURL+'url/unsupported-option-value/', option)\n\t\t}\n\t}\n\tObject.freeze(u)\n\treturn new Proxy(u, {\n\t\tget(target, prop, receiver) {\n\t\t\tswitch(prop) {\n\t\t\t\tcase Symbol.metroProxy:\n\t\t\t\t\treturn true\n\t\t\t\tbreak\n\t\t\t\tcase Symbol.metroSource:\n\t\t\t\t\treturn target\n\t\t\t\tbreak\n\t\t\t\tcase 'with':\n\t\t\t\t\treturn function(...options) {\n\t\t\t\t\t\treturn url(target, ...options)\n\t\t\t\t\t}\n\t\t\t\tbreak\n\t\t\t\tcase 'filename':\n\t\t\t\t\treturn target.pathname.split('/').pop()\n\t\t\t\tbreak\n\t\t\t\tcase 'folderpath':\n\t\t\t\t\treturn target.pathname.substring(0,target.pathname.lastIndexOf('\\\\')+1)\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tif (target[prop] instanceof Function) {\n\t\t\t\treturn target[prop].bind(target)\n\t\t\t}\n\t\t\treturn target[prop]\n\t\t}\n\t})\n}\n\n/**\n * @typedef {FormData} MetroFormData\n * @property {Symbol(source)} - returns the target Request of this Proxy\n * @property {Symbol(isProxy)} - returns true\n * @method with - returns a new MetroRequest, with the given options added\n * @param {<FormData|Object>} ...options - url options, handled in order\n * \n * Returns a new metro FormData object\n * @param {<FormData|Object>} ...options - formdata options, handled in order\n * @return {MetroURL} - a new metro FormData object\n */\nexport function formdata(...options)\n{\n\tvar params = new FormData()\n\tfor (let option of options) {\n\t\tif (option instanceof HTMLFormElement) {\n\t\t\toption = new FormData(option)\n\t\t}\n\t\tif (option instanceof FormData) {\n\t\t\tfor (let entry of option.entries()) {\n\t\t\t\tparams.append(entry[0],entry[1])\n\t\t\t}\n\t\t} else if (option && typeof option == 'object') {\n\t\t\tfor (let entry of Object.entries(option)) {\n\t\t\t\tif (Array.isArray(entry[1])) {\n\t\t\t\t\tfor (let value of entry[1]) {\n\t\t\t\t\t\tparams.append(entry[0], value)\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tparams.append(entry[0],entry[1])\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new metroError('metro.formdata: unknown option type '+metroURL+'formdata/unknown-option-value/', option)\n\t\t}\n\t}\n\tObject.freeze(params)\n\treturn new Proxy(params, {\n\t\tget: (target,prop,receiver) => {\n\t\t\tswitch(prop) {\n\t\t\t\tcase Symbol.metroProxy:\n\t\t\t\t\treturn true\n\t\t\t\tbreak\n\t\t\t\tcase Symbol.metroSource:\n\t\t\t\t\treturn target\n\t\t\t\tbreak\n\t\t\t\t//TODO: add toString() that can check\n\t\t\t\t//headers param: toString({headers:request.headers})\n\t\t\t\t//for the content-type\n\t\t\t\tcase 'with':\n\t\t\t\t\treturn function(...options) {\n\t\t\t\t\t\treturn formdata(target, ...options)\n\t\t\t\t\t}\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tif (target[prop] instanceof Function) {\n\t\t\t\treturn target[prop].bind(target)\n\t\t\t}\n\t\t\treturn target[prop]\n\t\t}\n\t})\n}\n\nconst metroConsole = {\n\terror: (message, ...details) => {\n\t\tconsole.error('\u24C2\uFE0F  ',message, ...details)\n\t},\n\tinfo: (message, ...details) => {\n\t\tconsole.info('\u24C2\uFE0F  ',message, ...details)\n\t},\n\tgroup: (name) => {\n\t\tconsole.group('\u24C2\uFE0F  '+name)\n\t},\n\tgroupEnd: (name) => {\n\t\tconsole.groupEnd('\u24C2\uFE0F  '+name)\n\t}\n}\n\n\n/**\n * Custom Metro Error function that outputs to the console then throws an error\n */\nexport function metroError(message, ...details) {\n\tmetroConsole.error(message, ...details)\n\treturn new Error(message, ...details)\n}\n\n/**\n * Set of debugging tools to trace the request - response flow\n * Tracer are run on all metro fetch calls\n */\nexport const trace = {\n\t/**\n\t * Adds a named tracer function\n\t * @param {string} name - the name of the tracer\n\t * @param {Function} tracer - the tracer function to call\n\t */\n\tadd(name, tracer) {\n\t\tClient.tracers[name] = tracer\n\t},\n\t/**\n\t * Removes a named tracer function\n\t * @param {string} name\n\t */\n\tdelete(name) {\n\t\tdelete Client.tracers[name]\n\t},\n\t/**\n\t * Removes all tracer functions\n\t */\n\tclear() {\n\t\tClient.tracers = {}\n\t},\n\t/**\n\t * Returns a set of request and response tracer functions that use the\n\t * console.group feature to shows nested request/response pairs, with\n\t * most commonly needed information for debugging\n\t */\n\tgroup() {\n\t\tlet group = 0;\n\t\treturn {\n\t\t\trequest: (req, middleware) => {\n\t\t\t\tgroup++\n\t\t\t\tmetroConsole.group(group)\n\t\t\t\tmetroConsole.info(req?.url, req, middleware)\n\t\t\t},\n\t\t\tresponse: (res, middleware) => {\n\t\t\t\tmetroConsole.info(res?.body ? res.body[Symbol.metroSource]: null, res, middleware)\n\t\t\t\tmetroConsole.groupEnd(group)\n\t\t\t\tgroup--\n\t\t\t}\n\t\t}\n\t}\n}\n", "import * as metro from '../metro.mjs'\n\nexport default function jsonmw(options) {\n\toptions = Object.assign({\n\t\tmimetype: 'application/json',\n\t\treviver: null,\n\t\treplacer: null,\n\t\tspace: ''\n\t}, options)\n\n\treturn async (req, next) => {\n\t\tif (!isJSON(req.headers.get('Accept'))) {\n\t\t\treq = req.with({\n\t\t\t\theaders: {\n\t                'Accept': options.mimetype\n\t            }\n\t        })\n\t\t}\n\t\tif (['POST','PUT','PATCH','QUERY'].includes(req.method)) {\n\t\t\tif (req.data && typeof req.data=='object' && !(req.data instanceof ReadableStream)) {\n\t\t\t\tif (!isJSON(req.headers.get('content-type'))) {\n\t\t\t\t\treq = req.with({\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t'Content-Type':options.mimetype,\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t\treq = req.with({\n\t\t\t\t\tbody: JSON.stringify(req.data, options.replacer, options.space)\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t\tlet res = await next(req)\n\t\tif (isJSON(res.headers.get('content-type'))) {\n\t\t\tlet tempRes = res.clone()\n\t\t\tlet body = await tempRes.text()\n\t\t\ttry {\n\t\t\t\tlet json = JSON.parse(body, options.reviver)\n\t\t\t\treturn res.with({\n\t\t\t\t\tbody: json\n\t\t\t\t})\n\t\t\t} catch(e) {\n\t\t\t\t// ignore parse errors\n\t\t\t}\n\t\t} \n\t\treturn res\n\t}\n}\n\nconst jsonRE = /^application\\/([a-zA-Z0-9\\-_]+\\+)?json\\b/\nfunction isJSON(contentType) {\n\treturn jsonRE.exec(contentType)\n}", "import * as metro from '../metro.mjs'\n\nexport default function thrower(options) {\n\n\treturn async (req, next) => {\n\t\tlet res = await next(req)\n\t\tif (!res.ok) {\n\t\t\tif (options && typeof options[res.status] == 'function') {\n\t\t\t\tres = options[res.status].apply(res, req)\n\t\t\t} else {\n\t\t\t\tthrow new Error(res.status+': '+res.statusText, {\n\t\t\t\t\tcause: res\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t\treturn res\n\t}\n\n}", "import * as m from './metro.mjs'\nimport jsonmw from './mw/json.mjs'\nimport thrower from './mw/thrower.mjs'\n\nconst metro = Object.assign({}, m, {\n\tmw: {\n\t\tjsonmw,\n\t\tthrower\n\t}\n})\n\nif (!globalThis.metro) {\n\tglobalThis.metro = metro\n}\n\nexport default metro"],
  "mappings": "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",
  "names": ["metro_exports", "__export", "Client", "client", "formdata", "metroError", "request", "response", "trace", "url", "metroURL", "_Client", "#options", "#verbs", "options", "option", "#addMiddlewares", "param", "verb", "middlewares", "index", "m", "req", "res", "next", "middleware", "tracers", "tracer", "getRequestParams", "req", "current", "params", "prop", "value", "url", "key", "val", "request", "options", "requestParams", "option", "r", "data", "target", "receiver", "getResponseParams", "res", "response", "responseParams", "appendSearchParams", "validParams", "u", "param", "metroError", "metroURL", "formdata", "entry", "metroConsole", "message", "details", "name", "trace", "tracer", "Client", "group", "middleware", "jsonmw", "options", "req", "next", "isJSON", "res", "body", "json", "jsonRE", "contentType", "thrower", "options", "req", "next", "res", "metro", "metro_exports", "jsonmw", "thrower", "everything_default"]
}
